

# üö® AWS CLI ‚ÄúBad Finder‚Äù Toolkit

A set of AWS CLI + `jq` tools and a companion script (`badfinder.sh`) to find **misconfigured or orphaned AWS resources**, like:

- **CloudFormation stacks** with missing or stopped EC2 instances  
- **EC2 instances** missing required tags (`owner`, `expires`)  
- **Unattached EBS Volumes** that cost money but serve no purpose  

Ideal for dev/test accounts where engineers spin up instances and stacks daily but don‚Äôt always clean up.

---

## üîß Setup

- Install AWS CLI v2  
  ```bash
  brew install awscli   # macOS
  sudo apt-get install -y awscli  # Ubuntu / Debian
  ```
- Install `jq`:  
  ```bash
  brew install jq
  sudo apt-get install jq
  ```
- Configure CLI with credentials/region:  
  ```bash
  aws configure
  ```
- Set AWS CLI to JSON output by default:  
  `~/.aws/config`:
  ```ini
  [default]
  output = json
  region = us-east-1
  ```

---

## üìú `badfinder.sh`

```bash
#!/usr/bin/env bash
# badfinder.sh
#
# Find problematic AWS resources:
#  - CloudFormation stacks with terminated/stopped EC2s
#  - EC2 instances missing tags: 'owner' or 'expires'
#  - Unattached EBS volumes

set -euo pipefail

BADSTACKS=()
STOPPEDSTACKS=()

echo "üîç Scanning for misconfigured AWS assets..."

# --- CloudFormation stacks with bad/missing EC2 instances ---
for STACK in $(aws cloudformation list-stacks \
    --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE \
    --query 'StackSummaries[].StackName' --output text); do

    INSTANCE=$(aws cloudformation describe-stack-resources \
        --stack-name "$STACK" \
        --query 'StackResources[?ResourceType==`AWS::EC2::Instance`].PhysicalResourceId' \
        --output text)

    [[ -z "$INSTANCE" ]] && continue

    STATUS=$(aws ec2 describe-instance-status \
        --include-all-instances \
        --instance-ids "$INSTANCE" \
        --query 'InstanceStatuses[].InstanceState.Name' \
        --output text 2>/dev/null || true)

    if [[ -z "$STATUS" ]]; then
        BADSTACKS+=("$STACK")
    elif [[ "$STATUS" == "stopped" ]]; then
        STOPPEDSTACKS+=("$STACK")
    fi
done

echo "‚ö†Ô∏è CloudFormation stacks with missing instances:"
printf '%s\n' "${BADSTACKS[@]}"

echo "üõë CloudFormation stacks with stopped instances:"
printf '%s\n' "${STOPPEDSTACKS[@]}"

# --- EC2 instances missing tags ---
echo "‚ö†Ô∏è Instances missing 'owner' tag:"
aws ec2 describe-instances \
  --query "Reservations[].Instances[?!contains(Tags[].Key, 'owner')].InstanceId" \
  --output text

echo "‚ö†Ô∏è Instances missing 'expires' tag:"
aws ec2 describe-instances \
  --query "Reservations[].Instances[?!contains(Tags[].Key, 'expires')].InstanceId" \
  --output text

# --- Unattached EBS Volumes ---
echo "üí∏ Unattached EBS volumes:"
aws ec2 describe-volumes \
  --filters Name=status,Values=available \
  --query "Volumes[].VolumeId" \
  --output text

exit 0
```

### ‚úÖ Improvements over old version

- Uses **`set -euo pipefail`** for safer bash  
- Replaces `grep | awk | sed` chaining with **AWS `--query` filters** and `jq`-less where possible (faster, fewer moving parts)  
- Uses **arrays** (`BADSTACKS=()`) for clarity  
- Works even if AWS throttles partial results (`--query` is server-side efficient filtering)  
- More descriptive emoji/status messages  

---

## ü™Ñ Example Runs

```bash
./badfinder.sh

üîç Scanning for misconfigured AWS assets...
‚ö†Ô∏è CloudFormation stacks with missing instances:
dev-test-stack
legacy-db-stack

üõë CloudFormation stacks with stopped instances:
qa-api-stack

‚ö†Ô∏è Instances missing 'owner' tag:
i-0123456789 i-0abcdef1234

‚ö†Ô∏è Instances missing 'expires' tag:
i-09aabbccddeeff

üí∏ Unattached EBS volumes:
vol-0abcd12345 vol-09876defgh
```

Now you have a quick triage list of what to clean.

---

## üéØ Handy One-Liners (Modern AWS CLI + `--query`)

### Get IP addresses

- **Private IP of a running instance:**
  ```bash
  aws ec2 describe-instances \
    --instance-ids i-1234567890abcdef \
    --query 'Reservations[].Instances[].PrivateIpAddress' \
    --output text
  ```
- **Public IP:**
  ```bash
  aws ec2 describe-instances \
    --instance-ids i-1234567890abcdef \
    --query 'Reservations[].Instances[].PublicIpAddress' \
    --output text
  ```
- **Both private + public:**
  ```bash
  aws ec2 describe-instances \
    --instance-ids i-1234567890abcdef \
    --query 'Reservations[].Instances[][PrivateIpAddress,PublicIpAddress]' \
    --output text
  ```

### Find all unattached EBS volumes
```bash
aws ec2 describe-volumes \
  --filters Name=status,Values=available \
  --query 'Volumes[].{VolumeId:VolumeId,Size:Size,AZ:AvailabilityZone}' \
  --output table
```

### EC2s missing specific tags
```bash
aws ec2 describe-instances \
  --query "Reservations[].Instances[?!contains(Tags[].Key, 'owner')].InstanceId" \
  --output text
```

---

## üßπ Best Practices

- Always test with `--dry-run` where available (for stop/terminate or delete commands).  
- Consider replacing ‚Äúad hoc‚Äù tag checks with **Service Control Policies (SCPs)**, **AWS Config rules**, or **Cloud Custodian / CloudHealth policies** for enforcement rather than cleanup.  
- Use `aws sso login` or profiles in `~/.aws/config` to clean across multiple accounts.  

---

## üìö References

- [AWS CLI filtering with JMESPath (`--query`)](https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html)  
- [jq Manual](https://stedolan.github.io/jq/manual/)  
- [CloudFormation describe-stack-resources](https://docs.aws.amazon.com/cli/latest/reference/cloudformation/describe-stack-resources.html)  

##
##
