provider "aws" {
  region = "us-west-2"  # Set your region
}

data "aws_eks_cluster" "cluster" {
  name = var.eks_cluster_name
}

data "aws_eks_cluster_auth" "cluster" {
  name = var.eks_cluster_name
}

resource "helm_release" "karpenter" {
  name             = "karpenter"
  repository       = "oci://public.ecr.aws/karpenter"
  chart            = "karpenter"
  version          = "v0.27.3"
  namespace        = "karpenter"
  create_namespace = true

  values = [
    <<-EOF
    controller:
      resources:
        requests:
          cpu: 500m
          memory: 512Mi
        limits:
          cpu: 800m
          memory: 1Gi
    EOF
  ]

  set {
    name  = "serviceAccount.annotations.eks\\.amazonaws\\.com/role-arn"
    value = var.karpenter_iam_role_arn
  }

  set {
    name  = "settings.aws.clusterName"
    value = var.eks_cluster_name
  }

  set {
    name  = "settings.aws.clusterEndpoint"
    value = data.aws_eks_cluster.cluster.endpoint
  }

  set {
    name  = "settings.aws.defaultInstanceProfile"
    value = var.karpenter_instance_profile_arn
  }
}

resource "helm_release" "karpenter_provisioner" {
  depends_on = [helm_release.karpenter]
  name       = "karpenter-provisioner"
  repository = "https://nishantn3.github.io/helm-charts"
  chart      = "raw"
  version    = "0.2.5"

  values = [
    <<-EOF
    resources:
      - apiVersion: karpenter.sh/v1alpha5
        kind: Provisioner
        metadata:
          name: default
        spec:
          requirements:
            - key: "karpenter.sh/capacity-type"
              operator: In
              values: ["spot", "on-demand"]
            - key: "karpenter.k8s.aws/instance-family"
              operator: In
              values: ["t3", "m5", "c5"]
          limits:
            resources:
              cpu: "100"
          providerRef:
            name: default
          ttlSecondsAfterEmpty: 60
          ttlSecondsUntilExpired: 2592000
    EOF
  ]
}

variable "eks_cluster_name" {
  description = "Name of the existing EKS cluster"
  type        = string
}

variable "karpenter_iam_role_arn" {
  description = "IAM role ARN for Karpenter to assume"
  type        = string
}

variable "karpenter_instance_profile_arn" {
  description = "Instance profile ARN for nodes provisioned by Karpenter"
  type        = string
}


##
##
##

Explanation
IAM Role: The serviceAccount.annotations.eks.amazonaws.com/role-arn annotation maps the IAM role to the Karpenter service account, allowing it to manage EC2 resources on your behalf.

Karpenter Helm Chart:

The helm_release "karpenter" block installs the main Karpenter controller.
Resources: Specifies CPU and memory requests and limits for the Karpenter controller itself.
Provisioner:

Sets up the resource requests, instance types, and configuration for EC2 instances Karpenter will provision.
ttlSecondsAfterEmpty defines the time a node can stay empty before Karpenter terminates it.
ttlSecondsUntilExpired defines the maximum time Karpenter will keep a node.
Additional Setup
Ensure that the IAM role specified in karpenter_iam_role_arn has these managed policies:

AmazonEKSWorkerNodePolicy
AmazonEKS_CNI_Policy
AmazonEC2ContainerRegistryReadOnly
This will allow the Karpenter controller to provision EC2 instances and manage network interfaces in the VPC.

##
##
##
