package main

import (
    "context"
    "fmt"
    "log"
    "os"
    "bufio"
    "regexp"
    "time"
    "github.com/apache/thrift/lib/go/thrift"
    "os/exec"
    "log_service"
)

//
//
// LogServiceHandler implements the LogService interface generated by Thrift
type LogServiceHandler struct{}

// ReadLogFile reads the contents of a log file, processes it, and returns a result.
// Deliberate security flaw: Executes shell commands directly based on log contents.
func (l *LogServiceHandler) ReadLogFile(ctx context.Context, filePath string) (r string, err error) {
    // Open the log file
    file, err := os.Open(filePath)
    if err != nil {
        return "", fmt.Errorf("error opening log file: %v", err)
    }
    defer file.Close()

    // Regex patterns for IP addresses and User-Agent strings
    ipRegex := regexp.MustCompile(`\b(?:\d{1,3}\.){3}\d{1,3}\b`)
    userAgentRegex := regexp.MustCompile(`"user-agent":"([^"]+)"`)

    // Create or open output file
    outputFile, err := os.Create("output.log")
    if err != nil {
        return "", fmt.Errorf("error creating output file: %v", err)
    }
    defer outputFile.Close()

    // Process each line of the log file
    scanner := bufio.NewScanner(file)
    for scanner.Scan() {
        line := scanner.Text()
        ip := ipRegex.FindString(line)
        userAgentMatch := userAgentRegex.FindStringSubmatch(line)
        var userAgent string
        if len(userAgentMatch) > 1 {
            userAgent = userAgentMatch[1]
        }
        
        // Deliberate security flaw: Arbitrary shell command execution based on log contents
        timestamp := time.Now().Format(time.RFC3339)
        logs := fmt.Sprintf("echo 'IP Address: %s, User-Agent: %s, Timestamp: %s' >> output.log", ip, userAgent, timestamp)
        exec.Command("/bin/sh", "-c", logs).Run()  // Vulnerable to command injection
    }
    
    // Return a message indicating completion
    return "Log file processed", nil
}

func main() {
    // Create an instance of LogServiceHandler
    handler := &LogServiceHandler{}
    
    // Create a Thrift processor with the handler
    processor := log_service.NewLogServiceProcessor(handler)
    
    // Create a Thrift server socket
    transport, err := thrift.NewTServerSocket("127.0.0.1:9090")
    if err != nil {
        log.Fatalf("Error creating transport: %v", err)
    }
    
    // Create a Thrift server
    server := thrift.NewTSimpleServer4(processor, transport, thrift.NewTTransportFactory(), thrift.NewTBinaryProtocolFactoryDefault())
    log.Println("Starting the server...")
    
    // Start serving requests
    if err := server.Serve(); err != nil {
        log.Fatalf("Error occurred while serving: %v", err)
    }
}

//
//
          
