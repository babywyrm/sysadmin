# =============================================================================
# ConfigMap: Global non-sensitive configuration values.
# =============================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: go-hello-world-config
  labels:
    app: go-hello-world
# Data keys defined here can be consumed as environment variables.
data:
  APP_ENV: "production"      # Example environment setting.
  LOG_LEVEL: "info"
  FEATURE_FLAG: "enabled"     # Custom feature toggles.

# =============================================================================
# Secret: Stores sensitive information.
# =============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: go-hello-world-secret
  labels:
    app: go-hello-world
type: Opaque
# Secret values must be base64 encoded. For example,
# echo -n "s3cr3t" | base64 => czNjcjN0
data:
  DB_PASSWORD: czNjcjN0      # A sample database password.
  API_KEY: QUJDREVGR0g=       # Example API key.

# =============================================================================
# Deployment: Defines the desired state for Pods running the Go Application.
# =============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-hello-world
  labels:
    app: go-hello-world
spec:
  replicas: 3  # Number of pods for high availability.
  selector:
    matchLabels:
      app: go-hello-world  # Selects pods with this label.
  template:
    metadata:
      labels:
        app: go-hello-world
        tier: backend         # Extra label example for categorizing workloads.
    spec:
      # -----------------------------------------------------------------------
      # Init Containers:
      # These run before the main container(s) and can perform setup tasks.
      # -----------------------------------------------------------------------
      initContainers:
      - name: init-wait-dependencies
        image: busybox
        command:
          - sh
          - -c
          - |
            echo "Waiting for external dependencies..."
            sleep 5
        # Example: Could perform DB connectivity tests, download config files, etc.
      # -----------------------------------------------------------------------
      # Containers:
      # The main container running your Go application.
      # -----------------------------------------------------------------------
      containers:
      - name: go-hello-world
        image: callicoder/go-hello-world:1.0.0  # Update with your image.
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080                 # Must match your app's listening port.
        # -------------------------------------------------------------------
        # Environment Variables:
        # Values are injected from ConfigMaps and Secrets.
        # -------------------------------------------------------------------
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: go-hello-world-config
              key: APP_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: go-hello-world-config
              key: LOG_LEVEL
        - name: FEATURE_FLAG
          valueFrom:
            configMapKeyRef:
              name: go-hello-world-config
              key: FEATURE_FLAG
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: go-hello-world-secret
              key: DB_PASSWORD
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: go-hello-world-secret
              key: API_KEY
        # -------------------------------------------------------------------
        # Resources:
        # Specify resource requests/limits to help the scheduler.
        # -------------------------------------------------------------------
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        # -------------------------------------------------------------------
        # Probes:
        # Liveness probe to ensure the Pod is healthy.
        # Readiness probe indicates when the Pod is ready to serve traffic.
        # -------------------------------------------------------------------
        livenessProbe:
          httpGet:
            path: /health           # Endpoint for liveness checking.
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /readiness        # Endpoint to determine if ready.
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 1
        # -------------------------------------------------------------------
        # Lifecycle Hooks: (Optional)
        # These commands run at container lifecycle events.
        # -------------------------------------------------------------------
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "echo 'PreStop: Preparing to shutdown...'"]
      # -----------------------------------------------------------------------
      # Volumes: (Optional)
      # You can mount ConfigMaps, Secrets, or PersistentVolumes as needed.
      # -----------------------------------------------------------------------
      volumes:
      - name: config-volume
        configMap:
          name: go-hello-world-config

# =============================================================================
# Service: Exposes your application's Pods inside the cluster.
# =============================================================================
apiVersion: v1
kind: Service
metadata:
  name: go-hello-world-svc
  labels:
    app: go-hello-world
spec:
  type: ClusterIP      # Internal ClusterIP service.
  ports:
  - port: 8080         # Service port.
    targetPort: 8080   # Must match containerPort.
    protocol: TCP
    name: http
  selector:
    app: go-hello-world

# =============================================================================
# Ingress: Routes external traffic to the Service.
# =============================================================================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: go-hello-world-ingress
  annotations:
    # Specify the ingress controller to use; here, our example uses NGINX.
    kubernetes.io/ingress.class: "nginx"
    # Rewrite the URL path if needed.
    nginx.ingress.kubernetes.io/rewrite-target: /
    # Enable SSL redirect if your controller supports it.
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
      - go-hello-world.example.com
    secretName: tls-secret  # Replace with your TLS secret for HTTPS.
  rules:
  - host: go-hello-world.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: go-hello-world-svc
            port:
              number: 8080

# =============================================================================
# HorizontalPodAutoscaler: Automatically scales your Deployment based on CPU.
# =============================================================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: go-hello-world-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: go-hello-world
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
# =============================================================================
# Additional Examples: Could include NetworkPolicy, PodDisruptionBudget, etc.
# -----------------------------------------------------------------------------

# NetworkPolicy example to restrict traffic between pods.
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: go-hello-world-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: go-hello-world
  ingress:
  - from:
    - podSelector: {}  # Allow traffic from any pod; modify as necessary.
    ports:
    - protocol: TCP
      port: 8080

# PodDisruptionBudget: Ensures a minimum number of pods remain available.
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: go-hello-world-pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: go-hello-world
