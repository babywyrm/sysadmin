#!/usr/bin/env python3
"""
generate_external_secrets.py

Utility to bootstrap ExternalSecret manifests for Argo CD + External-Secrets operator.
Each generated CR is annotated with your chosen sync-wave so that Argo CD applies
them *before* your Helm charts (which reference the resulting k8s Secrets).

Usage:
  # From your overlay directory (e.g. overlays/prod):
  ./generate_external_secrets.py \
    --config ../../config.yaml \
    --out . \
    --update-kustomize

Arguments:
  --config, -c           Path to a YAML config listing secrets (default: config.yaml)
  --out, -o              Output directory for the generated .yaml files (default: .)
  --update-kustomize     If set, appends the generated filenames into kustomization.yaml

The config.yaml format:

```yaml
# config.yaml
secretStore: aws-secret-store
secretStoreKind: SecretStore
namespace: aqua                # optional: namespace for the ExternalSecret CRs
syncWave: "-1"                 # the Argo CD sync-wave to apply

secrets:
  - name: aqua-db-creds                   # metadata.name of the ExternalSecret
    targetName: aqua-db-creds             # spec.target.name → resulting k8s Secret
    data:
      - secretKey: username
        remoteRef:
          key: /prod/aqua/db/username
          property: username
      - secretKey: password
        remoteRef:
          key: /prod/aqua/db/password
          property: password

  - name: aqua-enforcer-token
    targetName: aqua-enforcer-token
    data:
      - secretKey: token
        remoteRef:
          key: /prod/aqua/enforcer/token
          property: token


##
##


#!/usr/bin/env python3
"""
generate_external_secrets.py

Utility to bootstrap ExternalSecret manifests for Argo CD + External-Secrets operator.
Each generated CR is annotated with your chosen sync-wave so that Argo CD applies
them *before* your Helm charts (which reference the resulting k8s Secrets).

Usage:
  # From your overlay directory (e.g. overlays/prod):
  ./generate_external_secrets.py \
    --config ../../config.yaml \
    --out . \
    --update-kustomize

Arguments:
  --config, -c           Path to a YAML config listing secrets (default: config.yaml)
  --out, -o              Output directory for the generated .yaml files (default: .)
  --update-kustomize     If set, appends the generated filenames into kustomization.yaml

The config.yaml format:

```yaml
# config.yaml
secretStore: aws-secret-store
secretStoreKind: SecretStore
namespace: aqua                # optional: namespace for the ExternalSecret CRs
syncWave: "-1"                 # the Argo CD sync-wave to apply

secrets:
  - name: aqua-db-creds                   # metadata.name of the ExternalSecret
    targetName: aqua-db-creds            # spec.target.name → resulting k8s Secret
    data:
      - secretKey: username
        remoteRef:
          key: /prod/aqua/db/username
          property: username
      - secretKey: password
        remoteRef:
          key: /prod/aqua/db/password
          property: password

  - name: aqua-enforcer-token
    targetName: aqua-enforcer-token
    data:
      - secretKey: token
        remoteRef:
          key: /prod/aqua/enforcer/token
          property: token

##
##
