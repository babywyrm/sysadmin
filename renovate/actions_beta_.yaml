
name: PR Check for Renovate

on:
  pull_request:
    types:
      - opened
      - synchronize  # Triggers when a PR is updated with new commits
    branches:
      - main

jobs:
  renovate-pr-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Check if the PR is from Renovate based on labels or title
      - name: Check if Renovate PR
        id: renovate
        run: |
          # Check if PR is from Renovate based on PR title or label
          PR_TITLE=$(jq -r .pull_request.title "$GITHUB_EVENT_PATH")
          PR_LABELS=$(jq -r .pull_request.labels[].name "$GITHUB_EVENT_PATH" | grep -i renovate || echo "false")
          
          if [[ "$PR_TITLE" == *"renovate"* || "$PR_LABELS" == "renovate" ]]; then
            echo "This is a Renovate PR."
            echo "::set-output name=is_renovate::true"
          else
            echo "This is NOT a Renovate PR."
            echo "::set-output name=is_renovate::false"
          fi

      # If it is a Renovate PR, check for specific conditions (e.g., Dockerfile base image version)
      - name: Check Dockerfile base image (for Renovate PR)
        if: steps.renovate.outputs.is_renovate == 'true'
        run: |
          BASE_IMAGE=$(grep '^FROM' Dockerfile | awk '{print $2}')
          echo "Base image found: $BASE_IMAGE"
          # Define allowed base images
          ALLOWED_BASE_IMAGES=("python:3.10-alpine" "node:14-alpine" "golang:1.17-alpine")

          # Check if base image is allowed
          if [[ ! " ${ALLOWED_BASE_IMAGES[@]} " =~ " ${BASE_IMAGE} " ]]; then
            echo "::error::Unapproved base image found: $BASE_IMAGE"
            echo "The base image in Dockerfile is not approved. Blocking PR."
            exit 1  # Fail the job to block PR from being merged
          else
            echo "Base image is approved: $BASE_IMAGE"
          fi

      # Optional: Notify about PR approval (Slack, Email, etc.)
      - name: Send alert on unapproved PR (optional)
        if: failure() && steps.renovate.outputs.is_renovate == 'true'
        run: |
          # Send alert (customize this for Slack, email, etc.)
          echo "Sending alert: Unapproved Renovate PR detected."
          # Add logic for Slack API, GitHub comments, etc.
          # For GitHub comment:
          PR_NUMBER=$(jq -r .pull_request.number "$GITHUB_EVENT_PATH")
          COMMENT="Unapproved Renovate PR detected: Base image $BASE_IMAGE is not allowed."
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -X POST \
            -d '{"body":"'"$COMMENT"'"}' \
            https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments

      # Additional Dependency Check for Renovate PRs (example: checking versions in package.json)
      - name: Check dependency versions (package.json)
        if: steps.renovate.outputs.is_renovate == 'true'
        run: |
          # Check for package.json dependencies (if needed)
          NODE_VERSION=$(jq -r '.engines.node' package.json)
          echo "Node version required: $NODE_VERSION"
          if [[ "$NODE_VERSION" != "14.x" ]]; then
            echo "::error::Unapproved Node.js version in package.json"
            exit 1
          fi
