
#!/usr/bin/python3

##
##
##

enc_password = b"0fasdfasdfNv32asdfasdfaPTwgYasdlfknas;dfzzxlczvknlsakdnflk3E"
key = b"armando"
import base64
array = base64.b64decode(enc_password)
array2 = []
for i in range(len(array)):
    array2.append(chr(array[i] ^ key[i % len(key)] ^ 223))


print("here you go......")

print("".join(array2))



#####################
##
##
##



266


35
I have the following piece of Base64 encoded data, and I want to use the Python Base64 module to extract information from it. It seems that module does not work. How can I make it work?


python
base64
decode
Share
Improve this question
Follow
edited Jul 19, 2021 at 17:54
user avatar
Peter Mortensen
30.4k2121 gold badges102102 silver badges124124 bronze badges
asked Aug 12, 2010 at 17:52
user avatar
ladyfafa
5,75977 gold badges2525 silver badges2222 bronze badges
2
Can you expand on the problem you're having? I just used base64.b64decode to decode it fine... – 
Blair Conrad
 Aug 12, 2010 at 17:57
1
what is your method please? Did you use base64.b64decode(string) ? – 
ladyfafa
 Aug 12, 2010 at 17:58
1
I think the result should be a series of coordinates, such as (x, y, z), with different values – 
ladyfafa
 Aug 12, 2010 at 18:06
9
@ladyfafa, I don't know what to tell you. You were given a piece of data that was encoded in base64, and you know how to decode the string to get the original data - after that, you still have to understand the format of the data in order to be able to interpret it. Without giving us more information about the results, it's very difficult to tell you what to do with it. Even knowing that it's a series of coordinates isn't that helpful without knowing (for example) if they're 4 byte integers, or floats or what. Can you not get this information from the source of the data? Then we could help. – 
Blair Conrad
 Aug 12, 2010 at 18:12
3
I mean where did this data come from? Did your cat type it for you? Did you convert a bitmap into a string? Did program XYZ output it? – 
Nick T
 Aug 12, 2010 at 19:24
Show 20 more comments
9 Answers
Sorted by:

Highest score (default)

314

import base64
coded_string = '''Q5YACgA...'''
base64.b64decode(coded_string)
worked for me. At the risk of pasting an offensively-long result, I got:

>>> base64.b64decode(coded_string)



Follow
edited Apr 19 at 23:30
user avatar
CommunityBot
111 silver badge
answered Aug 12, 2010 at 17:58
user avatar
Blair Conrad
223k2525 gold badges132132 silver badges111111 bronze badges
3
I have exactlly the same process as you did, but what are the results ? – 
ladyfafa
 Aug 12, 2010 at 18:01
This is pretty old but I think their issue was the above is it doesn't print anything. I assume print base64.b64decode(coded_string) was what they were looking for. Thanks for the simple example it helped me! – 
Cadoo
 Mar 12, 2014 at 18:31 
I get an error: ~"partially initialized module 'base64' has no attribute 'b64decode'" – 
IgorGanapolsky
 Apr 18 at 21:05 
Add a comment

Report this ad

188

Python 3 (and 2)
import base64
a = 'eW91ciB0ZXh0'
base64.b64decode(a)
Python 2
A quick way to decode it without importing anything:

'eW91ciB0ZXh0'.decode('base64')
or more descriptive

>>> a = 'eW91ciB0ZXh0'
>>> a.decode('base64')
'your text'
Share
Improve this answer
Follow
edited Apr 3, 2020 at 21:41
answered Aug 25, 2014 at 13:52
user avatar
Levite
16.5k77 gold badges4949 silver badges5050 bronze badges
10
Btw this also works for encoding >>> 'your text'.encode('base64') – 
Levite
 Feb 13, 2015 at 9:53 
1
First part of the answer is slightly misleading. Python 3 and 2 don't produce same output for base64.b64decode(a). See stackoverflow.com/questions/63056193/… – 
Akilan
 Mar 30 at 19:47
*This whole answer – 
RixTheTyrunt
 May 21 at 16:30
Add a comment

46

Base64 encode/decode example:

import base64

mystr = 'O João mordeu o cão!'

# Encode
mystr_encoded = base64.b64encode(mystr.encode('utf-8'))
# b'TyBKb8OjbyBtb3JkZXUgbyBjw6NvIQ=='

# Decode
mystr_encoded = base64.b64decode(mystr_encoded).decode('utf-8')
# 'O João mordeu o cão!'
Share
Improve this answer
Follow
edited Jul 19, 2021 at 18:05
user avatar
Peter Mortensen
30.4k2121 gold badges102102 silver badges124124 bronze badges
answered May 30, 2018 at 10:36
user avatar
Slipstream
11.9k33 gold badges5454 silver badges4343 bronze badges
1
This helped me in my project. Thanks @Slipstream – 
Libin Thomas
 Jul 25, 2021 at 11:20
Add a comment

Report this ad

20

I personally just use this Python code to decode Base64 strings:

print open("FILE-WITH-STRING", "rb").read().decode("base64")
So you can run it in a Bash script like this:

python -c 'print open("FILE-WITH-STRING", "rb").read().decode("base64")' > outputfile
file -i outputfile
twneale has also pointed out an even simpler solution: base64 -d

So you can use it like this:

cat "FILE WITH STRING" | base64 -d > OUTPUTFILE
#Or You Can Do This
echo "STRING" | base64 -d > OUTPUTFILE
That will save the decoded string to outputfile and then attempt to identify the file type using either the file tool or you can try TrID. The following command will decode the string into a file and then use TrID to automatically identify the file's type and add the extension.

echo "STRING" | base64 -d > OUTPUTFILE; trid -ce OUTPUTFILE
Share
Improve this answer
Follow
edited Jul 19, 2021 at 18:04
user avatar
Peter Mortensen
30.4k2121 gold badges102102 silver badges124124 bronze badges
answered Oct 20, 2012 at 0:29
user avatar
japzone
6,14122 gold badges1414 silver badges1414 bronze badges
1
Or "cat FILE-WITH-STRING | base64 -d" > outputfile – 
twneale
 Mar 25, 2013 at 13:45
@twneale Of course you come along and post something simple like that :) Easier to remember than my method but no need to rewrite my scripts. I'll add it to my answer. – 
japzone
 Mar 25, 2013 at 14:56
I had no idea string.decode('base64') existed. That is so cool. – 
Kiran Jonnalagadda
 Dec 12, 2013 at 21:23
Be sure to close the file handle afterwards, your first code snippet doesn't do this and someone may use it as part of a larger application. – 
Rebs
 Sep 7, 2016 at 6:27
On Mac OS X, use cat base64-image.txt | base64 --decode > base64-image.png – 
Mr-IDE
 Jul 10, 2017 at 9:38
Add a comment

16

Interesting if maddening puzzle...but here's the best I could get:

The data seems to repeat every 8 bytes or so.

import struct
import base64

target = \
r'''Q5YACgAAAABDlgAbAAAAAEOWAC0AAAAAQ5YAPwAAAABDlgdNAAAAAEOWB18AAAAAQ5YH 
[snip.]
ZAAAAABExxniAAAAAETH/rQAAAAARMf/MwAAAABEx/+yAAAAAETIADEAAAAA''' 

data = base64.b64decode(target)

cleaned_data = []
struct_format = ">ff"
for i in range(len(data) // 8):
   cleaned_data.append(struct.unpack_from(struct_format, data, 8*i))
That gives output like the following (a sampling of lines from the first 100 or so):

(300.00030517578125, 0.0)
(300.05975341796875, 241.93943786621094)
(301.05612182617187, 0.0)
(301.05667114257812, 8.7439727783203125)
(326.9617919921875, 0.0)
(326.96826171875, 0.0)
(328.34432983398438, 280.55218505859375)
