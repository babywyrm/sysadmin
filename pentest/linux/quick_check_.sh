#!/bin/bash
# Enhanced-ish Linux System Enumeration Script for Suspicious Activity

# --- Configuration ---
CRON_PATHS=("/etc/cron.d" "/etc/cron.daily" "/etc/cron.hourly"
            "/etc/cron.monthly" "/etc/cron.weekly" "/var/spool/cron/crontabs")
SUSPICIOUS_FILE_PATHS=("/dev" "/tmp" "/var/tmp" "/var/www/html" "/usr/share")
SENSITIVE_BIN_PATHS=("/usr/bin" "/usr/sbin" "/bin" "/sbin" "/etc")
TRUSTED_HASH_DB="/path/to/trusted_hashes.db"  # Replace with actual path.... please 

CRON_REGEX='sh |bash |curl|wget|nc |perl|python|base64'

# --- Global Variable ---
PROC_VERBOSE=0  # Default: /proc check is not verbose

# --- Helper Functions ---
section() {
    echo -e "\n\033[1;32m[+] $1\033[0m"
}

suspect() {
    echo -e "\e[31m[!]\e[0m $1"
}

serious() {
    echo -e "\e[1;31m[!!] $1\e[0m"  # Highlight more serious findings
}

# --- Check Functions ---
check_processes() {
    section "Suspicious Processes"
    local PROCESS_REGEX='rootkit|backdoor|perl|nc -e|bash -i|netcat|ncat|nc -l|telnet|python|python -m SimpleHTTPServer'

    ps aux --forest | grep -E "$PROCESS_REGEX" | grep -v grep
    if ps aux --forest | grep -Eq "$PROCESS_REGEX" ; then
        suspect "Possible suspicious processes running!"
    fi
}

check_ports() {
    section "Open Ports"
    echo "--- netstat ---"
    netstat -tulnp | grep LISTEN
    echo "--- ss ---"
    ss -tulnp | grep LISTEN
}

check_cronjobs() {
    section "Cron Jobs"
    for path in "${CRON_PATHS[@]}"; do
        echo "--- Listing: $path ---"
        ls -la "$path" 2>/dev/null || true
    done

    echo "--- Searching for suspicious entries ---"
    grep -riE "$CRON_REGEX" "${CRON_PATHS[@]}" 2>/dev/null
    if grep -qiE "$CRON_REGEX" "${CRON_PATHS[@]}"; then
        suspect "Suspicious cron job entries detected!"
    fi
}

check_users() {
    section "User Accounts"
    awk -F: '($3==0){print $1" has UID 0!"}' /etc/passwd | grep -v root
    if awk -F: '($3==0){print $1}' /etc/passwd | grep -v '^root$' >/dev/null; then
        suspect "Non-root user with UID 0 detected!"
    fi

    echo "--- Last Login Information ---"
    lastlog | grep -vE 'Never logged in|Username'
}

check_files() {
    section "Suspicious Files"
    find "${SUSPICIOUS_FILE_PATHS[@]}" -type f \( -name '*.sh' -o -name '*.pl' -o -name '*.py' \) -exec ls -la {} + 2>/dev/null
    if find "${SUSPICIOUS_FILE_PATHS[@]}" -type f \( -name '*.sh' -o -name '*.pl' -o -name '*.py' \)  >/dev/null; then
        suspect "Suspicious files found in defined paths!"
    fi
}

check_proc() {
    section "Suspicious /proc entries"
    if [[ $PROC_VERBOSE -eq 1 ]]; then
        echo "--- Verbose /proc check ---"
        grep -r "^/tmp" /proc/*/cwd 2>/dev/null
        grep -r "^/dev/shm" /proc/*/cwd 2>/dev/null
    else
        echo "--- Quick /proc check (use -v for verbose) ---"
        grep -l "^/tmp" /proc/*/cwd 2>/dev/null
        grep -l "^/dev/shm" /proc/*/cwd 2>/dev/null
    fi

    if grep -q "^/tmp" /proc/*/cwd 2>/dev/null; then
        suspect "Processes running from /tmp detected"
    fi
    if grep -q "^/dev/shm" /proc/*/cwd 2>/dev/null; then
        suspect "Processes running from /dev/shm detected!"
    fi
}

check_setuid() {
    section "Setuid/Setgid Binaries"
    find / -perm -4000 -type f -exec ls -la {} + 2>/dev/null
    if find / -perm -4000 -type f  >/dev/null; then
        suspect "Setuid/Setgid binaries found."
    fi
}

check_network_interfaces() {
    section "Network Interfaces"
    ip addr | grep inet
    ip link | grep -i promisc
    if ip link | grep -qi promisc; then
        suspect "Promiscuous mode interface detected!"
    fi
}

check_ssh_keys() {
    section "SSH Authorized Keys"
    find /home /root -name authorized_keys -exec ls -la {} + 2>/dev/null
    if find /home /root -name authorized_keys  >/dev/null; then
        suspect "SSH authorized keys found in home/root directories."
    fi
}

check_hidden() {
    section "Hidden Directories and Files"
    find / -path "/proc" -prune -o -path "/sys" -prune -o -path "/dev" -prune -o -name ".*" -type d -print 2>/dev/null
    find / -path "/proc" -prune -o -path "/sys" -prune -o -path "/dev" -prune -o -name ".*" -type f -print 2>/dev/null

    if find / -path "/proc" -prune -o -path "/sys" -prune -o -path "/dev" -prune -o -name ".*" -print 2>/dev/null | grep -q "\.\w"; then
        suspect "Hidden directories or files found (excluding /proc, /sys, /dev)!"
    fi
}

check_trojaned_binaries() {
    section "Trojaned Binaries"
    echo "--- Checking for unexpected SUID/SGID ---"
    find "${SENSITIVE_BIN_PATHS[@]}" -type f \( -perm -4000 -o -perm -2000 \) -exec ls -l {} \; 2>/dev/null

    echo "--- Checking for replaced binaries (requires $TRUSTED_HASH_DB) ---"
    if [[ -f "$TRUSTED_HASH_DB" ]]; then
        for bin_path in "${SENSITIVE_BIN_PATHS[@]}"; do
            find "$bin_path" -type f -executable -print0 | while IFS= read -r -d $'\0' file; do
                if [[ -x "$file" ]]; then
                    hash=$(sha256sum "$file" 2>/dev/null | awk '{print $1}')
                    if ! grep -q "^$hash" "$TRUSTED_HASH_DB"; then
                        serious "POTENTIAL TROJAN: $file (SHA256: $hash) not in trusted hash DB!"
                    fi
                fi
            done
        done
    else
        suspect "Trusted hash database ($TRUSTED_HASH_DB) not found.  Skipping hash checks."
    fi
}

check_routes() {
    section "Routing Table Anomalies"
    route -n
    if route -n | grep -qv "default"; then
        suspect "No default gateway route found."
    fi
    route -n | awk '$1=="0.0.0.0" && $2!="0.0.0.0" {print "Suspicious default route via "$2}'
    if route -n | awk '$1=="0.0.0.0" && $2!="0.0.0.0"' > /dev/null 2>&1; then
        suspect "Suspicious default gateway route found."
    fi
}

check_iptables() {
    section "IPTables Rules"
    iptables -L -n -v
    iptables -t nat -L -n -v
    if iptables -L -n -v | grep -Eq "ACCEPT all" || iptables -t nat -L -n -v | grep -Eq "REDIRECT"; then
        suspect "Permissive IPTables rules or redirection detected!"
    fi
}

# --- Main Execution ---
main() {
    local verbose_flag=0
    while getopts "v" opt; do
        case $opt in
            v)
                verbose_flag=1
                PROC_VERBOSE=1
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))

    echo -e "\033[32m[+] Linux System Enumeration Started at $(date)\033[0m"

    check_processes
    check_ports
    check_cronjobs
    check_users
    check_files
    check_proc
    check_setuid
    check_network_interfaces
    check_ssh_keys
    check_hidden
    check_trojaned_binaries
    check_routes
    check_iptables

    echo -e "\n\033[32m[+] Linux Enumeration Completed\033[0m"
}

main "$@"  # Execute the main function, passing arguments
