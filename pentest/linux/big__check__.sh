#!/bin/bash

##
# Enhanced Linux System Enumeration Script for Suspicious Activity, Lol, Beta 
# We need more control files and paths
# And, FIM

# --- Configuration ---
CRON_PATHS=("/etc/cron.d" "/etc/cron.daily" "/etc/cron.hourly"
            "/etc/cron.monthly" "/etc/cron.weekly" "/var/spool/cron/crontabs")
SUSPICIOUS_FILE_PATHS=("/dev" "/tmp" "/var/tmp" "/var/www/html" "/usr/share")
SENSITIVE_BIN_PATHS=("/usr/bin" "/usr/sbin" "/bin" "/sbin" "/etc")
TRUSTED_HASH_DB="/path/to/trusted_hashes.db"  # Replace with actual path

CRON_REGEX='sh |bash |curl|wget|nc |perl|python|base64'
LOG_FILE="$(date +%Y%m%d)_system_enum.log"

# --- Global Variables ---
PROC_VERBOSE=0  # Default: /proc check is not verbose
PIPE_PORT_ANALYSIS=0  # Default: Don't perform named pipe/port analysis

# --- Helper Functions ---
section() {
    echo -e "\n\033[1;32m[+] $1\033[0m" | tee -a "$LOG_FILE"
}

suspect() {
    echo -e "\e[31m[!]\e[0m $1" | tee -a "$LOG_FILE"
}

serious() {
    echo -e "\e[1;31m[!!] $1\e[0m" | tee -a "$LOG_FILE"
}

info() {
    echo -e "\e[34m[*]\e[0m $1" | tee -a "$LOG_FILE"
}

# --- Check Functions ---
check_processes() {
    section "Suspicious Processes"
    local PROCESS_REGEX='rootkit|backdoor|perl|nc -e|bash -i|netcat|ncat|nc -l|telnet|python|python -m SimpleHTTPServer'

    ps aux --forest | grep -E "$PROCESS_REGEX" | grep -v grep | tee -a "$LOG_FILE"
    if ps aux --forest | grep -Eq "$PROCESS_REGEX" ; then
        suspect "Possible suspicious processes running!"
    fi
    
    # Check for processes hiding from ps output
    local ps_count=$(ps -ef | wc -l)
    local proc_count=$(ls -d /proc/[0-9]* 2>/dev/null | wc -l)
    if [[ $(($proc_count - $ps_count)) -gt 10 ]]; then
        serious "Process count mismatch! Possible hidden processes ($ps_count in ps vs $proc_count in /proc)"
    fi
}

check_ports() {
    section "Open Ports"
    echo "--- netstat ---" | tee -a "$LOG_FILE"
    netstat -tulnp | grep LISTEN | tee -a "$LOG_FILE"
    echo "--- ss ---" | tee -a "$LOG_FILE"
    ss -tulnp | grep LISTEN | tee -a "$LOG_FILE"
    
    # Check for suspicious ports
    local SUSPICIOUS_PORTS="4444|5555|6666|1337|31337|31338|8080|8888"
    if netstat -tulnp | grep -Eq "$SUSPICIOUS_PORTS"; then
        suspect "Potentially suspicious ports detected!"
    fi
}

check_cronjobs() {
    section "Cron Jobs"
    for path in "${CRON_PATHS[@]}"; do
        echo "--- Listing: $path ---" | tee -a "$LOG_FILE"
        ls -la "$path" 2>/dev/null | tee -a "$LOG_FILE" || true
    done

    echo "--- Searching for suspicious entries ---" | tee -a "$LOG_FILE"
    grep -riE "$CRON_REGEX" "${CRON_PATHS[@]}" 2>/dev/null | tee -a "$LOG_FILE"
    if grep -qiE "$CRON_REGEX" "${CRON_PATHS[@]}" 2>/dev/null; then
        suspect "Suspicious cron job entries detected!"
    fi
    
    # Also check anacron and systemd timers
    if [ -d "/etc/anacrontab" ]; then
        echo "--- Anacron jobs ---" | tee -a "$LOG_FILE"
        cat /etc/anacrontab 2>/dev/null | tee -a "$LOG_FILE"
    fi
    
    echo "--- Systemd timers ---" | tee -a "$LOG_FILE"
    systemctl list-timers --all 2>/dev/null | tee -a "$LOG_FILE"
}

check_users() {
    section "User Accounts"
    awk -F: '($3==0){print $1" has UID 0!"}' /etc/passwd | grep -v root | tee -a "$LOG_FILE"
    if awk -F: '($3==0){print $1}' /etc/passwd | grep -v '^root$' >/dev/null; then
        suspect "Non-root user with UID 0 detected!"
    fi

    echo "--- Last Login Information ---" | tee -a "$LOG_FILE"
    lastlog | grep -vE 'Never logged in|Username' | tee -a "$LOG_FILE"
    
    echo "--- Recently added users ---" | tee -a "$LOG_FILE"
    grep -v nologin /etc/passwd | tail -5 | tee -a "$LOG_FILE"
    
    echo "--- Users with shell access ---" | tee -a "$LOG_FILE"
    grep "bash\|sh\|zsh" /etc/passwd | tee -a "$LOG_FILE"
    
    echo "--- Sudoers configuration ---" | tee -a "$LOG_FILE"
    grep -v "^#" /etc/sudoers 2>/dev/null | grep -v "^$" | tee -a "$LOG_FILE"
    ls -la /etc/sudoers.d/ 2>/dev/null | tee -a "$LOG_FILE"
}

check_files() {
    section "Suspicious Files"
    find "${SUSPICIOUS_FILE_PATHS[@]}" -type f \( -name '*.sh' -o -name '*.pl' -o -name '*.py' \) -exec ls -la {} + 2>/dev/null | tee -a "$LOG_FILE"
    if find "${SUSPICIOUS_FILE_PATHS[@]}" -type f \( -name '*.sh' -o -name '*.pl' -o -name '*.py' \) >/dev/null 2>&1; then
        suspect "Suspicious files found in defined paths!"
    fi
    
    # Check for recently modified files
    echo "--- Recently modified executable files ---" | tee -a "$LOG_FILE"
    find / -type f -executable -mtime -7 -not -path "/proc/*" -not -path "/sys/*" -not -path "/run/*" 2>/dev/null | head -20 | tee -a "$LOG_FILE"
    
    # Check for files with suspicious strings
    echo "--- Files containing suspicious strings ---" | tee -a "$LOG_FILE"
    grep -r "reverse shell\|backdoor\|netcat\|nc -e" /tmp /var/tmp /home 2>/dev/null | head -20 | tee -a "$LOG_FILE"
}

check_proc() {
    section "Suspicious /proc entries"
    if [[ $PROC_VERBOSE -eq 1 ]]; then
        echo "--- Verbose /proc check ---" | tee -a "$LOG_FILE"
        grep -r "^/tmp" /proc/*/cwd 2>/dev/null | tee -a "$LOG_FILE"
        grep -r "^/dev/shm" /proc/*/cwd 2>/dev/null | tee -a "$LOG_FILE"
    else
        echo "--- Quick /proc check (use -v for verbose) ---" | tee -a "$LOG_FILE"
        grep -l "^/tmp" /proc/*/cwd 2>/dev/null | tee -a "$LOG_FILE"
        grep -l "^/dev/shm" /proc/*/cwd 2>/dev/null | tee -a "$LOG_FILE"
    fi

    if grep -q "^/tmp" /proc/*/cwd 2>/dev/null; then
        suspect "Processes running from /tmp detected"
    fi
    if grep -q "^/dev/shm" /proc/*/cwd 2>/dev/null; then
        suspect "Processes running from /dev/shm detected!"
    fi
    
    # Check for deleted binaries still running
    echo "--- Processes running from deleted binaries ---" | tee -a "$LOG_FILE"
    ls -la /proc/*/exe 2>/dev/null | grep '(deleted)' | tee -a "$LOG_FILE"
    if ls -la /proc/*/exe 2>/dev/null | grep -q '(deleted)'; then
        suspect "Processes running from deleted binaries found!"
    fi
}

check_setuid() {
    section "Setuid/Setgid Binaries"
    find / -perm -4000 -type f -exec ls -la {} + 2>/dev/null | tee -a "$LOG_FILE"
    
    # Check for unusual setuid binaries
    echo "--- Unusual setuid binaries ---" | tee -a "$LOG_FILE"
    for bin in $(find / -perm -4000 -type f 2>/dev/null); do
        if ! echo "$bin" | grep -q "^/bin\|^/usr/bin\|^/sbin\|^/usr/sbin"; then
            serious "Unusual SUID binary: $bin"
        fi
    done
}

check_network_interfaces() {
    section "Network Interfaces"
    ip addr | grep inet | tee -a "$LOG_FILE"
    ip link | grep -i promisc | tee -a "$LOG_FILE"
    if ip link | grep -qi promisc; then
        suspect "Promiscuous mode interface detected!"
    fi
    
    # Check for unusual network interfaces
    echo "--- Unusual interfaces ---" | tee -a "$LOG_FILE"
    ip a | grep -v "lo\|eth\|ens\|wlan\|docker" | grep -i up | tee -a "$LOG_FILE"
}

check_ssh_keys() {
    section "SSH Authorized Keys"
    find /home /root -name authorized_keys -exec ls -la {} + 2>/dev/null | tee -a "$LOG_FILE"
    
    # Also print the actual keys
    echo "--- SSH authorized keys content ---" | tee -a "$LOG_FILE"
    find /home /root -name authorized_keys -exec cat {} \; 2>/dev/null | tee -a "$LOG_FILE"
    
    # Check for unusual SSH configurations
    echo "--- SSH config ---" | tee -a "$LOG_FILE"
    grep -v "^#" /etc/ssh/sshd_config 2>/dev/null | grep -v "^$" | tee -a "$LOG_FILE"
    
    if grep -q "PermitRootLogin yes" /etc/ssh/sshd_config 2>/dev/null; then
        suspect "Root login is permitted via SSH!"
    fi
}

check_hidden() {
    section "Hidden Directories and Files"
    find / -path "/proc" -prune -o -path "/sys" -prune -o -path "/dev" -prune -o -name ".*" -type d -print 2>/dev/null | tee -a "$LOG_FILE"
    find / -path "/proc" -prune -o -path "/sys" -prune -o -path "/dev" -prune -o -name ".*" -type f -print 2>/dev/null | tee -a "$LOG_FILE"

    if find / -path "/proc" -prune -o -path "/sys" -prune -o -path "/dev" -prune -o -name ".*" -print 2>/dev/null | grep -q "\.\w"; then
        suspect "Hidden directories or files found (excluding /proc, /sys, /dev)!"
    fi
    
    # Check for files with no user/group
    echo "--- Files with no user/group ---" | tee -a "$LOG_FILE"
    find / -nouser -o -nogroup -not -path "/proc/*" 2>/dev/null | head -20 | tee -a "$LOG_FILE"
}

check_trojaned_binaries() {
    section "Trojaned Binaries"
    echo "--- Checking for unexpected SUID/SGID ---" | tee -a "$LOG_FILE"
    find "${SENSITIVE_BIN_PATHS[@]}" -type f \( -perm -4000 -o -perm -2000 \) -exec ls -l {} \; 2>/dev/null | tee -a "$LOG_FILE"

    echo "--- Checking for replaced binaries (requires $TRUSTED_HASH_DB) ---" | tee -a "$LOG_FILE"
    if [[ -f "$TRUSTED_HASH_DB" ]]; then
        for bin_path in "${SENSITIVE_BIN_PATHS[@]}"; do
            find "$bin_path" -type f -executable -print0 2>/dev/null | while IFS= read -r -d $'\0' file; do
                if [[ -x "$file" ]]; then
                    hash=$(sha256sum "$file" 2>/dev/null | awk '{print $1}')
                    if ! grep -q "^$hash" "$TRUSTED_HASH_DB" 2>/dev/null; then
                        serious "POTENTIAL TROJAN: $file (SHA256: $hash) not in trusted hash DB!"
                    fi
                fi
            done
        done
    else
        suspect "Trusted hash database ($TRUSTED_HASH_DB) not found. Skipping hash checks."
    fi
    
    # Check for common rootkit files
    echo "--- Checking for known rootkit files ---" | tee -a "$LOG_FILE"
    find / -name "rkh*" -o -name "rkhunter" -o -name "chkrootkit" 2>/dev/null | tee -a "$LOG_FILE"
    
    # Check for common backdoor names
    find / -name ".backdoor" -o -name "backdoor.*" -o -name "*backdoor*" -not -path "*/proc/*" 2>/dev/null | tee -a "$LOG_FILE"
}

check_routes() {
    section "Routing Table Anomalies"
    route -n | tee -a "$LOG_FILE"
    if ! route -n | grep -q "default"; then
        suspect "No default gateway route found."
    fi
    route -n | awk '$1=="0.0.0.0" && $2!="0.0.0.0" {print "Suspicious default route via "$2}' | tee -a "$LOG_FILE"
    if route -n | awk '$1=="0.0.0.0" && $2!="0.0.0.0"' > /dev/null 2>&1; then
        suspect "Suspicious default gateway route found."
    fi
}

check_iptables() {
    section "IPTables Rules"
    iptables -L -n -v 2>/dev/null | tee -a "$LOG_FILE"
    iptables -t nat -L -n -v 2>/dev/null | tee -a "$LOG_FILE"
    if iptables -L -n -v 2>/dev/null | grep -Eq "ACCEPT all" || iptables -t nat -L -n -v 2>/dev/null | grep -Eq "REDIRECT"; then
        suspect "Permissive IPTables rules or redirection detected!"
    fi
    
    # Also check nftables if available
    if command -v nft >/dev/null 2>&1; then
        echo "--- nftables rules ---" | tee -a "$LOG_FILE"
        nft list ruleset 2>/dev/null | tee -a "$LOG_FILE"
    fi
}

check_scheduled_tasks() {
    section "Scheduled Tasks"
    echo "--- systemd timers ---" | tee -a "$LOG_FILE"
    systemctl list-timers --all 2>/dev/null | tee -a "$LOG_FILE"
    
    echo "--- at jobs ---" | tee -a "$LOG_FILE"
    atq 2>/dev/null | tee -a "$LOG_FILE"
    
    # Look for unusual systemd services
    echo "--- unusual systemd services ---" | tee -a "$LOG_FILE"
    systemctl list-units --type=service --all | grep -v "system\|dbus\|network\|getty\|user" | tee -a "$LOG_FILE"
}

check_kernel_modules() {
    section "Kernel Modules"
    lsmod | tee -a "$LOG_FILE"
    
    # Check for suspicious modules
    echo "--- Suspicious kernel modules ---" | tee -a "$LOG_FILE"
    lsmod | grep -E "hide|hid|backdoor|rootkit" | tee -a "$LOG_FILE"
    
    if lsmod | grep -qE "hide|hid|backdoor|rootkit"; then
        serious "Potentially malicious kernel modules detected!"
    fi
}

check_named_pipes_ports() {
    section "Named Pipes and Port Analysis"
    
    # Find all named pipes
    echo "--- Named Pipes (FIFOs) ---" | tee -a "$LOG_FILE"
    find / -type p -not -path "/proc/*" -not -path "/sys/*" 2>/dev/null | tee -a "$LOG_FILE"
    
    # Get all active TCP/UDP connections with process info
    echo "--- Active TCP/UDP Connections ---" | tee -a "$LOG_FILE"
    netstat -tulpn 2>/dev/null | tee -a "$LOG_FILE"
    
    # Generate visual map of ports to processes
    echo -e "\n--- Port to Process Visualization ---" | tee -a "$LOG_FILE"
    echo "+-------------+-------+--------------------+" | tee -a "$LOG_FILE"
    echo "| PORT        | PROTO | PROCESS            |" | tee -a "$LOG_FILE"
    echo "+-------------+-------+--------------------+" | tee -a "$LOG_FILE"
    
    # Extract port and process information and format into table
    netstat -tulpn 2>/dev/null | grep -v "Active\|Proto" | awk '{
        split($4, addr_port, ":");
        port = addr_port[length(addr_port)];
        proto = $1;
        process = $7;
        if (process == "-" || process == "") process = "unknown";
        if (port != "" && port != "*") printf("| %-11s | %-5s | %-18s |\n", port, proto, process);
    }' | sort -n | tee -a "$LOG_FILE"
    
    echo "+-------------+-------+--------------------+" | tee -a "$LOG_FILE"
    
    # Generate network connection visualization
    echo -e "\n--- Connection Graph ---" | tee -a "$LOG_FILE"
    netstat -an | grep ESTABLISHED | awk '{print $5}' | awk -F: '{print $1}' | sort | uniq -c | sort -nr | head -10 | while read count ip; do
        bar=$(printf "%0.s#" $(seq 1 $((count/2))))
        printf "%-15s |%-30s| %d connections\n" "$ip" "$bar" "$count" | tee -a "$LOG_FILE"
    done
    
    # Check for processes with open pipes
    echo -e "\n--- Processes Using Named Pipes ---" | tee -a "$LOG_FILE"
    lsof | grep FIFO | tee -a "$LOG_FILE"
}

check_memory_regions() {
    section "Memory Maps"
    echo "--- Processes with writable-executable memory (potential code injection) ---" | tee -a "$LOG_FILE"
    
    # Look for unusual memory permissions (writable and executable)
    for pid in $(ls -d /proc/[0-9]* 2>/dev/null | cut -d '/' -f3); do
        if grep -q "rwx" /proc/$pid/maps 2>/dev/null; then
            process_name=$(cat /proc/$pid/comm 2>/dev/null)
            echo "PID $pid ($process_name) has writable+executable memory regions:" | tee -a "$LOG_FILE"
            grep rwx /proc/$pid/maps 2>/dev/null | head -3 | tee -a "$LOG_FILE"
        fi
    done
}

# --- Main Execution ---
main() {
    local verbose_flag=0
    while getopts "v-:" opt; do
        case $opt in
            v)
                verbose_flag=1
                PROC_VERBOSE=1
                ;;
            -)
                case "${OPTARG}" in
                    pp)
                        PIPE_PORT_ANALYSIS=1
                        ;;
                    *)
                        echo "Invalid option: --${OPTARG}" >&2
                        exit 1
                        ;;
                esac
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))

    # Create output directory if logging
    mkdir -p "$(dirname "$LOG_FILE")" 2>/dev/null

    echo -e "\033[32m[+] Linux System Enumeration Started at $(date)\033[0m" | tee "$LOG_FILE"
    info "Results are being logged to $LOG_FILE"

    # Run all standard checks
    check_processes
    check_ports
    check_cronjobs
    check_users
    check_files
    check_proc
    check_setuid
    check_network_interfaces
    check_ssh_keys
    check_hidden
    check_trojaned_binaries
    check_routes
    check_iptables
    check_scheduled_tasks
    check_kernel_modules
    check_memory_regions
    
    # Run named pipe and port analysis if requested
    if [[ $PIPE_PORT_ANALYSIS -eq 1 ]]; then
        check_named_pipes_ports
    fi

    echo -e "\n\033[32m[+] Linux Enumeration Completed\033[0m" | tee -a "$LOG_FILE"
    info "Full output has been saved to $LOG_FILE"
}

main "$@"  # Execute the main function, passing arguments
