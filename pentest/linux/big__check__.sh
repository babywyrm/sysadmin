#!/bin/bash
# Enhanced Linux System Enumeration Script for Suspicious Activity
# beta
# needs fim/containers/etc

# --- Configuration ---
CRON_PATHS=("/etc/cron.d" "/etc/cron.daily" "/etc/cron.hourly"
            "/etc/cron.monthly" "/etc/cron.weekly" "/var/spool/cron/crontabs")
SUSPICIOUS_FILE_PATHS=(
    "/dev" "/tmp" "/var/tmp" "/var/www/html" "/usr/share" 
    "/opt" "/dev/shm" "/run/shm" "/var/lib/php/sessions"
    "/var/log" "/mnt" "/media" "/usr/local/src" "/usr/local/bin"
    "/boot" "/usr/games" "/var/mail" "/.cache" "/root"
)
SENSITIVE_BIN_PATHS=("/usr/bin" "/usr/sbin" "/bin" "/sbin" "/etc")
TRUSTED_HASH_DB="/path/to/trusted_hashes.db"  # Replace with actual path

CRON_REGEX='sh |bash |curl|wget|nc |perl|python|base64'
LOG_FILE="$(date +%Y%m%d)_system_enum.log"

# --- Global Variables ---
PROC_VERBOSE=0  # Default: /proc check is not verbose
PIPE_PORT_ANALYSIS=0  # Default: Don't perform named pipe/port analysis
PAUSE_DURATION=1  # Default: Pause 1 second between sections

# --- Help Function ---
show_help() {
    cat << EOF
Linux System Enumeration Script - Help

USAGE:
  $0 [OPTIONS]

OPTIONS:
  -h, --help       Show this help message and exit
  -v               Verbose mode (includes more detailed output)
  -p N             Set pause duration between sections to N seconds (default: 1)
  --pause=N        Alternative syntax for setting pause duration
  --pp             Perform named pipe and port analysis with visual graphs

EXAMPLES:
  $0                    # Run basic enumeration
  $0 -v                 # Run with verbose output
  $0 -p 2               # Pause 2 seconds between sections
  $0 --pp               # Include pipe and port analysis
  $0 -v --pp -p 0.5     # Verbose with port analysis and fast pacing

OUTPUT:
  Results will be logged to YYYYMMDD_system_enum.log in current directory
EOF
    exit 0
}

# --- Helper Functions ---
section() {
    echo -e "\n\033[1;32m[+] $1\033[0m" | tee -a "$LOG_FILE"
    # Pause after section header to improve readability
    sleep 0.5
}

suspect() {
    echo -e "\e[31m[!]\e[0m $1" | tee -a "$LOG_FILE"
}

serious() {
    echo -e "\e[1;31m[!!] $1\e[0m" | tee -a "$LOG_FILE"
}

info() {
    echo -e "\e[34m[*]\e[0m $1" | tee -a "$LOG_FILE"
}

# Function to pause between sections
pause_output() {
    echo -e "\n" | tee -a "$LOG_FILE"
    sleep "$PAUSE_DURATION"
}

# Function to paginate large outputs
paginate() {
    if [ -t 1 ]; then  # Check if stdout is a terminal
        "$@" | less -R
        return ${PIPESTATUS[0]}
    else
        "$@"  # If not a terminal, just run the command
        return $?
    fi
}

# --- Check Functions ---
check_processes() {
    section "Suspicious Processes"
    local PROCESS_REGEX='rootkit|backdoor|perl|nc -e|bash -i|netcat|ncat|nc -l|telnet|python|python -m SimpleHTTPServer'

    ps aux --forest | grep -E "$PROCESS_REGEX" | grep -v grep | tee -a "$LOG_FILE"
    if ps aux --forest | grep -Eq "$PROCESS_REGEX" ; then
        suspect "Possible suspicious processes running!"
    fi
    
    # Check for processes hiding from ps output
    local ps_count=$(ps -ef | wc -l)
    local proc_count=$(ls -d /proc/[0-9]* 2>/dev/null | wc -l)
    if [[ $(($proc_count - $ps_count)) -gt 10 ]]; then
        serious "Process count mismatch! Possible hidden processes ($ps_count in ps vs $proc_count in /proc)"
    fi
    
    # Check for processes with unusual parent relationships
    echo "--- Unusual parent-child process relationships ---" | tee -a "$LOG_FILE"
    ps -eo ppid,pid,user,cmd | grep -E '^[[:space:]]+1[[:space:]]' | grep -v 'systemd|init|upstart|/usr/bin|/bin/' | tee -a "$LOG_FILE"
    
    # Check for processes running as unexpected users
    echo "--- Processes running as unusual users ---" | tee -a "$LOG_FILE"
    ps -eo user,pid,cmd | grep -v "^root\|^www-data\|^nobody\|^systemd\|^messagebus\|^syslog\|^_apt" | tee -a "$LOG_FILE"
    
    pause_output
}

check_ports() {
    section "Open Ports"
    echo "--- netstat ---" | tee -a "$LOG_FILE"
    netstat -tulnp | grep LISTEN | tee -a "$LOG_FILE"
    echo "--- ss ---" | tee -a "$LOG_FILE"
    ss -tulnp | grep LISTEN | tee -a "$LOG_FILE"
    
    # Check for suspicious ports
    local SUSPICIOUS_PORTS="4444|5555|6666|1337|31337|31338|8080|8888|9999|23|2222|4242|1234"
    if netstat -tulnp | grep -Eq "$SUSPICIOUS_PORTS"; then
        suspect "Potentially suspicious ports detected!"
        netstat -tulnp | grep -E "$SUSPICIOUS_PORTS" | tee -a "$LOG_FILE"
    fi
    
    # Check for unusual listening addresses
    echo "--- Services listening on non-localhost unusual ports ---" | tee -a "$LOG_FILE"
    netstat -tulnp | grep -v "127.0.0.1" | grep -E ':(1|2|3|4|5)[0-9]{3}' | tee -a "$LOG_FILE"
    
    pause_output
}

check_cronjobs() {
    section "Cron Jobs"
    for path in "${CRON_PATHS[@]}"; do
        echo "--- Listing: $path ---" | tee -a "$LOG_FILE"
        ls -la "$path" 2>/dev/null | tee -a "$LOG_FILE" || true
    done

    echo "--- Searching for suspicious entries ---" | tee -a "$LOG_FILE"
    grep -riE "$CRON_REGEX" "${CRON_PATHS[@]}" 2>/dev/null | tee -a "$LOG_FILE"
    if grep -qiE "$CRON_REGEX" "${CRON_PATHS[@]}" 2>/dev/null; then
        suspect "Suspicious cron job entries detected!"
    fi
    
    # Also check anacron and systemd timers
    if [ -f "/etc/anacrontab" ]; then
        echo "--- Anacron jobs ---" | tee -a "$LOG_FILE"
        cat /etc/anacrontab 2>/dev/null | tee -a "$LOG_FILE"
    fi
    
    echo "--- Systemd timers ---" | tee -a "$LOG_FILE"
    systemctl list-timers --all 2>/dev/null | tee -a "$LOG_FILE"
    
    # Check user crontabs
    echo "--- User crontabs ---" | tee -a "$LOG_FILE"
    for user_home in $(ls -la /home | grep '^d' | awk '{print $9}' | grep -v '^\.$' | grep -v '^\.\.$'); do
        if [ -f "/var/spool/cron/crontabs/$user_home" ]; then
            echo "Crontab for $user_home:" | tee -a "$LOG_FILE"
            cat "/var/spool/cron/crontabs/$user_home" 2>/dev/null | tee -a "$LOG_FILE"
        fi
    done
    
    pause_output
}

check_users() {
    section "User Accounts"
    awk -F: '($3==0){print $1" has UID 0!"}' /etc/passwd | grep -v root | tee -a "$LOG_FILE"
    if awk -F: '($3==0){print $1}' /etc/passwd | grep -v '^root$' >/dev/null; then
        suspect "Non-root user with UID 0 detected!"
    fi

    echo "--- Last Login Information ---" | tee -a "$LOG_FILE"
    lastlog | grep -vE 'Never logged in|Username' | tee -a "$LOG_FILE"
    
    echo "--- Recently added users ---" | tee -a "$LOG_FILE"
    grep -v nologin /etc/passwd | tail -5 | tee -a "$LOG_FILE"
    
    echo "--- Users with shell access ---" | tee -a "$LOG_FILE"
    grep "bash\|sh\|zsh" /etc/passwd | tee -a "$LOG_FILE"
    
    echo "--- Sudoers configuration ---" | tee -a "$LOG_FILE"
    grep -v "^#" /etc/sudoers 2>/dev/null | grep -v "^$" | tee -a "$LOG_FILE"
    ls -la /etc/sudoers.d/ 2>/dev/null | tee -a "$LOG_FILE"
    
    # Check for user accounts with no password
    echo "--- Accounts with no password ---" | tee -a "$LOG_FILE"
    awk -F: '($2==""){print $1" has no password!"}' /etc/shadow 2>/dev/null | tee -a "$LOG_FILE"
    
    # Check for users in sensitive groups
    echo "--- Users in sensitive groups ---" | tee -a "$LOG_FILE"
    for group in sudo admin wheel adm; do
        if grep -q "^$group:" /etc/group; then
            echo "Members of $group group:" | tee -a "$LOG_FILE"
            grep "^$group:" /etc/group | cut -d: -f4 | tee -a "$LOG_FILE"
        fi
    done
    
    pause_output
}

check_files() {
    section "Suspicious Files"
    for path in "${SUSPICIOUS_FILE_PATHS[@]}"; do
        if [ -d "$path" ]; then
            echo "--- Examining $path ---" | tee -a "$LOG_FILE"
            find "$path" -type f \( -name '*.sh' -o -name '*.pl' -o -name '*.py' -o -name '*.php' -o -name '*.rb' -o -name '*.elf' \) -mtime -7 -exec ls -la {} \; 2>/dev/null | head -15 | tee -a "$LOG_FILE"
        fi
    done
    
    # Check for recently modified files
    echo "--- Recently modified executable files ---" | tee -a "$LOG_FILE"
    find / -type f -executable -mtime -7 -not -path "/proc/*" -not -path "/sys/*" -not -path "/run/*" 2>/dev/null | head -20 | tee -a "$LOG_FILE"
    
    # Check for files with suspicious strings
    echo "--- Files containing suspicious strings ---" | tee -a "$LOG_FILE"
    grep -l -r "reverse shell\|backdoor\|netcat\|nc -e\|privileged\|exploit\|CVE-\|metasploit" "${SUSPICIOUS_FILE_PATHS[@]}" 2>/dev/null | head -20 | tee -a "$LOG_FILE"
    
    # Check for world-writable files in sensitive locations
    echo "--- World-writable files in sensitive locations ---" | tee -a "$LOG_FILE"
    find /etc /bin /sbin /usr/bin /usr/sbin -type f -perm -o+w -exec ls -la {} \; 2>/dev/null | tee -a "$LOG_FILE"
    
    # Check for unusual file extensions in web directories
    if [ -d "/var/www" ]; then
        echo "--- Unusual file extensions in web directories ---" | tee -a "$LOG_FILE"
        find /var/www -type f -not -name "*.php" -not -name "*.html" -not -name "*.js" -not -name "*.css" -not -name "*.png" -not -name "*.jpg" -not -name "*.gif" -not -name "*.ico" -not -name "*.txt" -not -name "*.md" -exec ls -la {} \; 2>/dev/null | tee -a "$LOG_FILE"
    fi
    
    pause_output
}

check_proc() {
    section "Suspicious /proc entries"
    if [[ $PROC_VERBOSE -eq 1 ]]; then
        echo "--- Verbose /proc check ---" | tee -a "$LOG_FILE"
        grep -r "^/tmp" /proc/*/cwd 2>/dev/null | tee -a "$LOG_FILE"
        grep -r "^/dev/shm" /proc/*/cwd 2>/dev/null | tee -a "$LOG_FILE"
        grep -r "^/run/shm" /proc/*/cwd 2>/dev/null | tee -a "$LOG_FILE"
        grep -r "^/var/tmp" /proc/*/cwd 2>/dev/null | tee -a "$LOG_FILE"
    else
        echo "--- Quick /proc check (use -v for verbose) ---" | tee -a "$LOG_FILE"
        grep -l "^/tmp" /proc/*/cwd 2>/dev/null | tee -a "$LOG_FILE"
        grep -l "^/dev/shm" /proc/*/cwd 2>/dev/null | tee -a "$LOG_FILE"
        grep -l "^/run/shm" /proc/*/cwd 2>/dev/null | tee -a "$LOG_FILE"
        grep -l "^/var/tmp" /proc/*/cwd 2>/dev/null | tee -a "$LOG_FILE"
    fi

    for suspicious_dir in "/tmp" "/dev/shm" "/run/shm" "/var/tmp" "/opt"; do
        if grep -q "^$suspicious_dir" /proc/*/cwd 2>/dev/null; then
            suspect "Processes running from $suspicious_dir detected!"
        fi
    done
    
    # Check for deleted binaries still running
    echo "--- Processes running from deleted binaries ---" | tee -a "$LOG_FILE"
    ls -la /proc/*/exe 2>/dev/null | grep '(deleted)' | tee -a "$LOG_FILE"
    if ls -la /proc/*/exe 2>/dev/null | grep -q '(deleted)'; then
        suspect "Processes running from deleted binaries found!"
    fi
    
    # Check for unusual process environment variables
    echo "--- Processes with suspicious environment variables ---" | tee -a "$LOG_FILE"
    for pid in $(ls -d /proc/[0-9]* 2>/dev/null | cut -d/ -f3); do
        if grep -q "LD_PRELOAD\|LD_LIBRARY_PATH" /proc/$pid/environ 2>/dev/null; then
            echo "PID $pid has suspicious environment variables:" | tee -a "$LOG_FILE"
            strings /proc/$pid/environ 2>/dev/null | grep -E "LD_PRELOAD|LD_LIBRARY_PATH" | tee -a "$LOG_FILE"
            echo "Command: $(cat /proc/$pid/cmdline 2>/dev/null | tr '\0' ' ')" | tee -a "$LOG_FILE"
        fi
    done
    
    pause_output
}

check_setuid() {
    section "Setuid/Setgid Binaries"
    echo "--- SUID binaries ---" | tee -a "$LOG_FILE"
    find / -perm -4000 -type f -exec ls -la {} + 2>/dev/null | tee -a "$LOG_FILE"
    
    echo "--- SGID binaries ---" | tee -a "$LOG_FILE"
    find / -perm -2000 -type f -exec ls -la {} + 2>/dev/null | tee -a "$LOG_FILE"
    
    # Check for unusual setuid binaries
    echo "--- Unusual setuid binaries ---" | tee -a "$LOG_FILE"
    COMMON_SUID_BINS="ping|su|sudo|passwd|mount|umount|chsh|chfn|gpasswd|newgrp|pkexec"
    find / -perm -4000 -type f -not -path "/snap/*" 2>/dev/null | grep -vE "$COMMON_SUID_BINS" | while read -r binary; do
        serious "Unusual SUID binary: $binary"
    done
    
    pause_output
}

check_network_interfaces() {
    section "Network Interfaces"
    ip addr | grep inet | tee -a "$LOG_FILE"
    ip link | grep -i promisc | tee -a "$LOG_FILE"
    if ip link | grep -qi promisc; then
        suspect "Promiscuous mode interface detected!"
    fi
    
    # Check for unusual network interfaces
    echo "--- Unusual interfaces ---" | tee -a "$LOG_FILE"
    ip a | grep -v "lo\|eth\|ens\|wlan\|docker\|veth\|br-\|virbr" | grep -i up | tee -a "$LOG_FILE"
    
    # Check active connections
    echo "--- Active network connections ---" | tee -a "$LOG_FILE"
    ss -tunap | tee -a "$LOG_FILE"
    
    # Check for unusual DNS settings
    echo "--- DNS configuration ---" | tee -a "$LOG_FILE"
    cat /etc/resolv.conf 2>/dev/null | tee -a "$LOG_FILE"
    
    # Check for ARP poisoning
    echo "--- ARP table (check for duplicates) ---" | tee -a "$LOG_FILE"
    arp -a | tee -a "$LOG_FILE"
    
    pause_output
}

check_ssh_keys() {
    section "SSH Authorized Keys"
    find /home /root -name authorized_keys -exec ls -la {} + 2>/dev/null | tee -a "$LOG_FILE"
    
    # Also print the actual keys
    echo "--- SSH authorized keys content ---" | tee -a "$LOG_FILE"
    find /home /root -name authorized_keys -exec cat {} \; 2>/dev/null | tee -a "$LOG_FILE"
    
    # Check for unusual SSH configurations
    echo "--- SSH config ---" | tee -a "$LOG_FILE"
    grep -v "^#" /etc/ssh/sshd_config 2>/dev/null | grep -v "^$" | tee -a "$LOG_FILE"
    
    if grep -q "PermitRootLogin yes" /etc/ssh/sshd_config 2>/dev/null; then
        suspect "Root login is permitted via SSH!"
    fi
    
    # Check for SSH keys without passphrase
    echo "--- Looking for private SSH keys ---" | tee -a "$LOG_FILE"
    find /home /root -name "id_rsa" -o -name "id_dsa" -o -name "id_ecdsa" -exec ls -la {} \; 2>/dev/null | tee -a "$LOG_FILE"
    
    pause_output
}

check_hidden() {
    section "Hidden Directories and Files"
    echo "--- Hidden directories (excluding common) ---" | tee -a "$LOG_FILE"
    find / -path "/proc" -prune -o -path "/sys" -prune -o -path "/dev" -prune -o -path "/run" -prune -o -name ".*" -type d -not -name ".config" -not -name ".cache" -not -name ".local" -not -name ".mozilla" -print 2>/dev/null | head -20 | tee -a "$LOG_FILE"
    
    echo "--- Hidden files in unusual locations ---" | tee -a "$LOG_FILE"
    find / -path "/proc" -prune -o -path "/sys" -prune -o -path "/dev" -prune -o -path "/run" -prune -o -path "/home" -prune -o -name ".*" -type f -print 2>/dev/null | tee -a "$LOG_FILE"

    # Check for files with spaces and hidden characters
    echo "--- Files with suspicious names ---" | tee -a "$LOG_FILE"
    find / -name "* *" -o -name ".*" -o -name " *" -type f -not -path "/proc/*" -not -path "/sys/*" -not -path "/dev/*" -not -path "/run/*" -not -path "/home/*/.config/*" -not -path "/home/*/.cache/*" 2>/dev/null | grep -v "/.git/" | head -20 | tee -a "$LOG_FILE"
    
    # Check for files with no user/group
    echo "--- Files with no user/group ---" | tee -a "$LOG_FILE"
    find / -nouser -o -nogroup -not -path "/proc/*" -not -path "/sys/*" 2>/dev/null | head -20 | tee -a "$LOG_FILE"
    
    pause_output
}

check_trojaned_binaries() {
    section "Trojaned Binaries"
    echo "--- Checking for unexpected SUID/SGID ---" | tee -a "$LOG_FILE"
    find "${SENSITIVE_BIN_PATHS[@]}" -type f \( -perm -4000 -o -perm -2000 \) -exec ls -l {} \; 2>/dev/null | tee -a "$LOG_FILE"

    echo "--- Checking for replaced binaries (requires $TRUSTED_HASH_DB) ---" | tee -a "$LOG_FILE"
    if [[ -f "$TRUSTED_HASH_DB" ]]; then
        for bin_path in "${SENSITIVE_BIN_PATHS[@]}"; do
            find "$bin_path" -type f -executable -print0 2>/dev/null | while IFS= read -r -d $'\0' file; do
                if [[ -x "$file" ]]; then
                    hash=$(sha256sum "$file" 2>/dev/null | awk '{print $1}')
                    if ! grep -q "^$hash" "$TRUSTED_HASH_DB" 2>/dev/null; then
                        serious "POTENTIAL TROJAN: $file (SHA256: $hash) not in trusted hash DB!"
                    fi
                fi
            done
        done
    else
        suspect "Trusted hash database ($TRUSTED_HASH_DB) not found. Skipping hash checks."
    fi
    
    # Check for common rootkit files
    echo "--- Checking for known rootkit files ---" | tee -a "$LOG_FILE"
    ROOTKIT_FILES="/dev/.hdparm /etc/.mdk /dev/ttyoa /dev/ttyop /dev/hda%% /proc/kset /dev/.spid /dev/.PROM"
    for file in $ROOTKIT_FILES; do
        if [ -e "$file" ]; then
            serious "Possible rootkit file found: $file"
        fi
    done
    
    # Check for binaries with unexpected libraries
    echo "--- Checking for unusual shared object dependencies ---" | tee -a "$LOG_FILE"
    for bin in /bin/ls /bin/ps /bin/netstat /bin/ss /bin/ip; do
        if [ -x "$bin" ]; then
            echo "Checking $bin:" | tee -a "$LOG_FILE"
            ldd "$bin" 2>/dev/null | grep -v "lib64\|libselinux\|libc\|libacl\|libpcre\|libdl\|libpthread\|linux-vdso" | tee -a "$LOG_FILE"
        fi
    done
    
    pause_output
}

check_routes() {
    section "Routing Table Anomalies"
    route -n | tee -a "$LOG_FILE"
    if ! route -n | grep -q "default"; then
        suspect "No default gateway route found."
    fi
    route -n | awk '$1=="0.0.0.0" && $2!="0.0.0.0" {print "Suspicious default route via "$2}' | tee -a "$LOG_FILE"
    if route -n | awk '$1=="0.0.0.0" && $2!="0.0.0.0"' > /dev/null 2>&1; then
        suspect "Suspicious default gateway route found."
    fi
    
    # Check for unusual routes
    echo "--- Unusual routes ---" | tee -a "$LOG_FILE"
    ip route | grep -v "default\|link-local\|169.254" | tee -a "$LOG_FILE"
    
    # Check for IPv6 routes
    echo "--- IPv6 routes ---" | tee -a "$LOG_FILE"
    ip -6 route | tee -a "$LOG_FILE"
    
    pause_output
}

check_iptables() {
    section "IPTables Rules"
    iptables -L -n -v 2>/dev/null | tee -a "$LOG_FILE"
    iptables -t nat -L -n -v 2>/dev/null | tee -a "$LOG_FILE"
    if iptables -L -n -v 2>/dev/null | grep -Eq "ACCEPT all" || iptables -t nat -L -n -v 2>/dev/null | grep -Eq "REDIRECT"; then
        suspect "Permissive IPTables rules or redirection detected!"
    fi
    
    # Also check nftables if available
    if command -v nft >/dev/null 2>&1; then
        echo "--- nftables rules ---" | tee -a "$LOG_FILE"
        nft list ruleset 2>/dev/null | tee -a "$LOG_FILE"
    fi
    
    pause_output
}

check_scheduled_tasks() {
    section "Scheduled Tasks"
    echo "--- systemd timers ---" | tee -a "$LOG_FILE"
    systemctl list-timers --all 2>/dev/null | tee -a "$LOG_FILE"
    
    echo "--- at jobs ---" | tee -a "$LOG_FILE"
    atq 2>/dev/null | tee -a "$LOG_FILE"
    
    # Look for unusual systemd services
    echo "--- unusual systemd services ---" | tee -a "$LOG_FILE"
    systemctl list-units --type=service --all | grep -v "system\|dbus\|network\|getty\|user" | tee -a "$LOG_FILE"
    
    # Check for hidden systemd services
    echo "--- Hidden or masked systemd services ---" | tee -a "$LOG_FILE"
    systemctl list-units --all | grep -E "masked|hidden" | tee -a "$LOG_FILE"
    
    pause_output
}

check_kernel_modules() {
    section "Kernel Modules"
    lsmod | tee -a "$LOG_FILE"
    
    # Check for suspicious modules
    echo "--- Suspicious kernel modules ---" | tee -a "$LOG_FILE"
    lsmod | grep -E "hide|hid|backdoor|rootkit" | tee -a "$LOG_FILE"
    
    if lsmod | grep -qE "hide|hid|backdoor|rootkit"; then
        serious "Potentially malicious kernel modules detected!"
    fi
    
    # Check for recently added kernel modules
    echo "--- Recently added kernel modules ---" | tee -a "$LOG_FILE"
    find /lib/modules/$(uname -r) -type f -name "*.ko" -mtime -7 | tee -a "$LOG_FILE"
    
    pause_output
}

check_named_pipes_ports() {
    section "Named Pipes and Port Analysis"
    
    # Find all named pipes
    echo "--- Named Pipes (FIFOs) ---" | tee -a "$LOG_FILE"
    find / -type p -not -path "/proc/*" -not -path "/sys/*" 2>/dev/null | tee -a "$LOG_FILE"
    
    # Get all active TCP/UDP connections with process info
    echo "--- Active TCP/UDP Connections ---" | tee -a "$LOG_FILE"
    netstat -tulpn 2>/dev/null | tee -a "$LOG_FILE"
    
    # Generate visual map of ports to processes
    echo -e "\n--- Port to Process Visualization ---" | tee -a "$LOG_FILE"
    echo "+-------------+-------+--------------------+" | tee -a "$LOG_FILE"
    echo "| PORT        | PROTO | PROCESS            |" | tee -a "$LOG_FILE"
    echo "+-------------+-------+--------------------+" | tee -a "$LOG_FILE"
    
    # Extract port and process information and format into table
    netstat -tulpn 2>/dev/null | grep -v "Active\|Proto" | awk '{
        split($4, addr_port, ":");
        port = addr_port[length(addr_port)];
        proto = $1;
        process = $7;
        if (process == "-" || process == "") process = "unknown";
        if (port != "" && port != "*") printf("| %-11s | %-5s | %-18s |\n", port, proto, process);
    }' | sort -n | tee -a "$LOG_FILE"
    
    echo "+-------------+-------+--------------------+" | tee -a "$LOG_FILE"
    
    # Generate network connection visualization
    echo -e "\n--- Connection Graph ---" | tee -a "$LOG_FILE"
    netstat -an | grep ESTABLISHED | awk '{print $5}' | awk -F: '{print $1}' | sort | uniq -c | sort -nr | head -10 | while read count ip; do
        bar=$(printf "%0.s#" $(seq 1 $((count/2))))
        printf "%-15s |%-30s| %d connections\n" "$ip" "$bar" "$count" | tee -a "$LOG_FILE"
    done
    
    # Check for processes with open pipes
    echo -e "\n--- Processes Using Named Pipes ---" | tee -a "$LOG_FILE"
    lsof | grep FIFO | tee -a "$LOG_FILE"
    
    # Create a network port scanning frequency graph
    echo -e "\n--- Port Access Frequency ---" | tee -a "$LOG_FILE"
    if command -v ss >/dev/null 2>&1; then
        ss -tan | awk '{print $4}' | awk -F: '{print $NF}' | sort | uniq -c | sort -nr | head -20 | while read count port; do
            if [ "$port" != "Local" ] && [ "$port" != "*" ]; then
                bar=$(printf "%0.s#" $(seq 1 $((count/5+1))))
                printf "Port %-5s |%-30s| %d connections\n" "$port" "$bar" "$count" | tee -a "$LOG_FILE"
            fi
        done
    fi
    
    pause_output
}

check_memory_regions() {
    section "Memory Analysis"
    echo "--- Processes with writable-executable memory (potential code injection) ---" | tee -a "$LOG_FILE"
    
    # Look for unusual memory permissions (writable and executable)
    for pid in $(ls -d /proc/[0-9]* 2>/dev/null | cut -d '/' -f3); do
        if grep -q "rwx" /proc/$pid/maps 2>/dev/null; then
            process_name=$(cat /proc/$pid/comm 2>/dev/null)
            echo "PID $pid ($process_name) has writable+executable memory regions:" | tee -a "$LOG_FILE"
            grep rwx /proc/$pid/maps 2>/dev/null | head -3 | tee -a "$LOG_FILE"
        fi
    done
    
    # Check for memory mapped executable files from suspicious locations
    echo "--- Processes with memory mapped from suspicious locations ---" | tee -a "$LOG_FILE"
    for pid in $(ls -d /proc/[0-9]* 2>/dev/null | cut -d '/' -f3); do
        if grep -qE "/tmp|/dev/shm|/var/tmp|/run/shm" /proc/$pid/maps 2>/dev/null; then
            process_name=$(cat /proc/$pid/comm 2>/dev/null)
            echo "PID $pid ($process_name) has memory mapped from suspicious location:" | tee -a "$LOG_FILE"
            grep -E "/tmp|/dev/shm|/var/tmp|/run/shm" /proc/$pid/maps 2>/dev/null | head -5 | tee -a "$LOG_FILE"
        fi
    done
    
    # Check for processes with high memory usage
    echo "--- Processes with high memory usage ---" | tee -a "$LOG_FILE"
    ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head -15 | tee -a "$LOG_FILE"
    
    # Check for memory dumps
    echo "--- Memory dump files ---" | tee -a "$LOG_FILE"
    find / -name "*.dmp" -o -name "*.core" -o -name "core.*" -not -path "/proc/*" -not -path "/sys/*" 2>/dev/null | head -20 | tee -a "$LOG_FILE"
    
    # Check for kernel memory information
    echo "--- Kernel memory information ---" | tee -a "$LOG_FILE"
    cat /proc/meminfo 2>/dev/null | head -20 | tee -a "$LOG_FILE"
    
    # Check for processes with page faults
    echo "--- Top processes by page faults (potential memory issues) ---" | tee -a "$LOG_FILE"
    ps -eo pid,min_flt,maj_flt,cmd --sort=-maj_flt | head -10 | tee -a "$LOG_FILE"
    
    # Run a quick vmstat if available
    if command -v vmstat >/dev/null 2>&1; then
        echo "--- Virtual memory statistics ---" | tee -a "$LOG_FILE"
        vmstat 1 5 | tee -a "$LOG_FILE"
    fi
    
    # Check swap usage by process if available
    if command -v smem >/dev/null 2>&1; then
        echo "--- Swap usage by process ---" | tee -a "$LOG_FILE"
        smem -s swap | head -10 | tee -a "$LOG_FILE"
    else
        echo "--- Process swap usage (manually calculated) ---" | tee -a "$LOG_FILE"
        for pid in $(ls -d /proc/[0-9]* 2>/dev/null | cut -d '/' -f3 | head -20); do
            if [ -f "/proc/$pid/status" ]; then
                process_name=$(cat /proc/$pid/comm 2>/dev/null)
                swap=$(grep VmSwap /proc/$pid/status 2>/dev/null | awk '{print $2}')
                if [ -n "$swap" ] && [ "$swap" -gt 0 ]; then
                    echo "PID $pid ($process_name): $swap kB swap usage" | tee -a "$LOG_FILE"
                fi
            fi
        done
    fi
    
    pause_output
}

check_container_isolation() {
    section "Container and Virtualization Analysis"
    
    # Check if we're in a container
    echo "--- Container detection ---" | tee -a "$LOG_FILE"
    if grep -q "container=\|docker\|lxc" /proc/1/cgroup 2>/dev/null; then
        suspect "System appears to be running inside a container!"
        cat /proc/1/cgroup | tee -a "$LOG_FILE"
    fi
    
    # Check for Docker
    echo "--- Docker containers ---" | tee -a "$LOG_FILE"
    if command -v docker >/dev/null 2>&1; then
        docker ps -a 2>/dev/null | tee -a "$LOG_FILE"
        
        # Check for privileged containers
        echo "--- Privileged Docker containers ---" | tee -a "$LOG_FILE"
        docker ps --format "{{.Names}}" 2>/dev/null | while read -r container; do
            if docker inspect --format '{{.HostConfig.Privileged}}' "$container" 2>/dev/null | grep -q "true"; then
                serious "Privileged Docker container found: $container"
            fi
        done
    fi
    
    # Check for LXC
    echo "--- LXC containers ---" | tee -a "$LOG_FILE"
    if command -v lxc-ls >/dev/null 2>&1; then
        lxc-ls -f 2>/dev/null | tee -a "$LOG_FILE"
    fi
    
    # Check for virtualization 
    echo "--- Virtualization info ---" | tee -a "$LOG_FILE"
    if command -v systemd-detect-virt >/dev/null 2>&1; then
        systemd-detect-virt 2>/dev/null | tee -a "$LOG_FILE"
    fi
    
    # Check dmesg for virtualization clues
    dmesg | grep -i "virtual\|vmware\|xen\|kvm\|vbox" | head -5 | tee -a "$LOG_FILE"
    
    pause_output
}

# --- Main Execution ---
main() {
    # Parse command-line options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                show_help
                ;;
            -v)
                PROC_VERBOSE=1
                ;;
            -p)
                if [[ $# -gt 1 && "$2" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
                    PAUSE_DURATION="$2"
                    shift
                else
                    echo "Error: -p requires a numeric value" >&2
                    exit 1
                fi
                ;;
            --pp)
                PIPE_PORT_ANALYSIS=1
                ;;
            --pause=*)
                PAUSE_DURATION="${1#*=}"
                if ! [[ "$PAUSE_DURATION" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
                    echo "Error: --pause requires a numeric value" >&2
                    exit 1
                fi
                ;;
            *)
                echo "Unknown option: $1" >&2
                echo "Use --help to see available options" >&2
                exit 1
                ;;
        esac
        shift
    done

    # Create output directory if logging
    mkdir -p "$(dirname "$LOG_FILE")" 2>/dev/null

    echo -e "\033[32m[+] Linux System Enumeration Started at $(date)\033[0m" | tee "$LOG_FILE"
    info "Results are being logged to $LOG_FILE"
    info "Output pacing set to $PAUSE_DURATION seconds between sections"
    
    # Run all standard checks
    check_processes
    check_ports
    check_cronjobs
    check_users
    check_files
    check_proc
    check_setuid
    check_network_interfaces
    check_ssh_keys
    check_hidden
    check_trojaned_binaries
    check_routes
    check_iptables
    check_scheduled_tasks
    check_kernel_modules
    check_memory_regions
    check_container_isolation
    
    # Run named pipe and port analysis if requested
    if [[ $PIPE_PORT_ANALYSIS -eq 1 ]]; then
        check_named_pipes_ports
    fi

    echo -e "\n\033[32m[+] Linux Enumeration Completed at $(date)\033[0m" | tee -a "$LOG_FILE"
    info "Full output has been saved to $LOG_FILE"
    info "To review the results in a paged format: less -R $LOG_FILE"
}

# Execute the main function
main "$@"
