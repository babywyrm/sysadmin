# .github/workflows/banking-service-cicd.yml
name: Banking Service CI/CD Pipeline

on:
  push:
    branches: [ main, release/* ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Static Analysis with CodeQL
        uses: github/codeql-action/analyze@v2
        with:
          languages: java, javascript, python
      
      - name: SAST with SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        with:
          sonarHostUrl: ${{ secrets.SONAR_HOST_URL }}
          sonarToken: ${{ secrets.SONAR_TOKEN }}
      
      - name: Container Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'banking-saas/transaction-service:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Dependency Scan
        run: |
          snyk test --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  compliance-check:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - uses: actions/checkout@v3
      
      - name: OPA Policy Check
        uses: instrumenta/conftest-action@master
        with:
          files: k8s/
          policy: policy/
          
      - name: PCI-DSS Compliance Check
        run: |
          ./compliance/pci-dss-check.sh
      
      - name: GDPR Compliance Check
        run: |
          ./compliance/gdpr-check.sh

  build-and-test:
    runs-on: ubuntu-latest
    needs: compliance-check
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Build with Maven
        run: mvn -B package --file pom.xml
        
      - name: Run Unit Tests
        run: mvn test
        
      - name: Run Integration Tests
        run: mvn verify -P integration-test
        
      - name: Build Docker image
        run: |
          docker build -t banking-saas/transaction-service:${{ github.sha }} .
          docker tag banking-saas/transaction-service:${{ github.sha }} banking-saas/transaction-service:latest
          
      - name: Push to Registry
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push banking-saas/transaction-service:${{ github.sha }}
          docker push banking-saas/transaction-service:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))
    steps:
      - uses: actions/checkout@v3
      
      - name: Set Kubernetes Context
        uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
          
      - name: Deploy to Staging
        if: github.ref == 'refs/heads/main'
        run: |
          sed -i 's/{{VERSION}}/${{ github.sha }}/g' k8s/deployment.yaml
          kubectl apply -f k8s/staging/
          
      - name: Deploy to Production
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          sed -i 's/{{VERSION}}/${{ github.sha }}/g' k8s/deployment.yaml
          kubectl apply -f k8s/production/
          
      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/transaction-service -n bank-a --timeout=5m
